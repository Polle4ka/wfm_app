import streamlit as st
import pandas as pd
import numpy as np
from dateutil.relativedelta import relativedelta
import altair as alt
import datetime

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã =====
st.set_page_config(page_title="WFM: –ü—Ä–æ–≥–Ω–æ–∑ –∏ —Ä–∞—Å—á—ë—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", layout="wide")

# ===== –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è =====
st.markdown("""
<style>
    .stDataFrame { border-radius: 12px; }
</style>
""", unsafe_allow_html=True)

# ===== –ó–∞–≥–æ–ª–æ–≤–æ–∫ =====
st.markdown("<h1 style='margin-bottom:0'>üìû WFM-–º–æ–¥—É–ª—å</h1><p style='color:#666;margin-top:4px'>–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞–≥—Ä—É–∑–∫–∏ –∏ —Ä–∞—Å—á—ë—Ç —à—Ç–∞—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç-—Ü–µ–Ω—Ç—Ä–∞</p>", unsafe_allow_html=True)

# ===== –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è =====
WORK_START = 9
WORK_END_EXCL = 20            # –∫–æ–Ω–µ—Ü –ù–ï –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
WORK_HOURS = list(range(WORK_START, WORK_END_EXCL))  # 9..19
SLOTS_PER_DAY = len(WORK_HOURS)
PEAK_HOURS = [9, 10]

# ===== –°–∞–π–¥–±–∞—Ä: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã =====
st.sidebar.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–≥–Ω–æ–∑–∞")
horizon_days = st.sidebar.slider("–ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ (–¥–Ω–µ–π)", 1, 31, 7, 1)
efficiency = st.sidebar.number_input("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–¥–æ–ª—è)", 0.10, 1.0, 0.85, 0.01, format="%.2f")

# –ö–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞
default_start = datetime.date(datetime.date.today().year, 8, 15)  # 15 –∞–≤–≥—É—Å—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
start_date = st.sidebar.date_input("üìÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞", default_start)

uploaded = st.sidebar.file_uploader("CSV: –î–∞—Ç–∞, –ß–∞—Å, [–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏], –ó–≤–æ–Ω–∫–∏, –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)", type=["csv"])

# ===== –£—Ç–∏–ª–∏—Ç—ã =====
def parse_aht(val):
    if pd.isna(val): return np.nan
    if isinstance(val, (int, float)): return float(val)
    try:
        parts = str(val).strip().split(":")
        if len(parts) == 2:
            m, s = parts; return int(m) + int(s)/60
        if len(parts) == 3:
            h, m, s = parts; return int(h)*60 + int(m) + int(s)/60
        return float(val)
    except Exception:
        return np.nan

def dates_where_month_ahead_is_weekend(dates) -> set:
    dt = pd.to_datetime(dates)
    uniq = sorted(set(dt.date if isinstance(dt, pd.DatetimeIndex) else dt.dt.date))
    res = set()
    for d in pd.to_datetime(uniq):
        future = d + relativedelta(months=+1)
        if future.weekday() in (5, 6):
            res.add(d.date())
    return res

def generate_future_business_hours(start_exclusive: pd.Timestamp, periods: int) -> pd.DatetimeIndex:
    out, cur = [], start_exclusive
    for _ in range(periods):
        nxt = cur + pd.Timedelta(hours=1)
        if nxt.hour >= WORK_END_EXCL or nxt.hour < WORK_START:
            nxt = (pd.Timestamp(cur.date()) + pd.Timedelta(days=1)).replace(hour=WORK_START)
        out.append(nxt)
        cur = nxt
    return pd.DatetimeIndex(out)

def trimmed_mean(series, lower=0.1, upper=0.9):
    """ –£—Å–µ—á—ë–Ω–Ω–æ–µ —Å—Ä–µ–¥–Ω–µ–µ """
    if series.empty:
        return np.nan
    q_low, q_high = series.quantile([lower, upper])
    return series[(series >= q_low) & (series <= q_high)].mean()

# ===== MAIN =====
if uploaded is None:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV. –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: –î–∞—Ç–∞, –ß–∞—Å, –ó–≤–æ–Ω–∫–∏, –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω).")
else:
    df = pd.read_csv(uploaded)

    # === –û—á–∏—Å—Ç–∫–∞ ===
    df["–î–∞—Ç–∞"] = pd.to_datetime(df["–î–∞—Ç–∞"], dayfirst=True, errors="coerce")
    df["–ß–∞—Å"] = pd.to_numeric(df["–ß–∞—Å"], errors="coerce")
    df["–ó–≤–æ–Ω–∫–∏"] = pd.to_numeric(df["–ó–≤–æ–Ω–∫–∏"], errors="coerce")
    df["–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)"] = df["–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)"].apply(parse_aht)
    df = df.dropna(subset=["–î–∞—Ç–∞", "–ß–∞—Å", "–ó–≤–æ–Ω–∫–∏"])
    df["–ß–∞—Å"] = df["–ß–∞—Å"].astype(int)
    df["Datetime"] = pd.to_datetime(df["–î–∞—Ç–∞"].dt.strftime("%Y-%m-%d") + " " + df["–ß–∞—Å"].astype(str) + ":00:00")
    df = df.set_index("Datetime").sort_index()
    df = df[df["–ß–∞—Å"].isin(WORK_HOURS)]
    if "–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏" not in df.columns:
        df["–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏"] = df.index.day_name(locale="Russian")

    # ===== –ò—Å—Ç–æ—Ä–∏—è –ø–æ –¥–Ω—è–º =====
    with st.expander("üìÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ –¥–Ω—è–º"):
        daily = df.groupby(df["–î–∞—Ç–∞"].dt.date).agg({"–ó–≤–æ–Ω–∫–∏": "sum", "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)": "mean"}).reset_index()
        daily["–ú–µ—Å—è—Ü"] = pd.to_datetime(daily["–î–∞—Ç–∞"]).dt.strftime("%B %Y")
        daily["–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏"] = pd.to_datetime(daily["–î–∞—Ç–∞"]).dt.day_name(locale="Russian")
        months = daily["–ú–µ—Å—è—Ü"].unique().tolist()
        sel_month = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü", months)
        daily_month = daily[daily["–ú–µ—Å—è—Ü"] == sel_month]
        st.dataframe(daily_month, use_container_width=True, height=350)
        chart_daily = alt.Chart(daily_month).mark_bar(color="#4C78A8").encode(
            x="–î–∞—Ç–∞:T", y="–ó–≤–æ–Ω–∫–∏:Q", tooltip=["–î–∞—Ç–∞","–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏","–ó–≤–æ–Ω–∫–∏"]
        )
        st.altair_chart(chart_daily, use_container_width=True)

    # ===== –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞ =====
    df_win = df[df.index >= pd.Timestamp(start_date)]
    if df_win.empty:
        st.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã.")
        st.stop()

    # === –ü—Ä–æ—Ñ–∏–ª—å –ø–æ —á–∞—Å–∞–º ===
    df_win["weekday"] = df_win.index.weekday
    df_win["hour"] = df_win["–ß–∞—Å"]
    pivot_med = df_win.pivot_table(index="hour", columns="weekday", values="–ó–≤–æ–Ω–∫–∏", aggfunc="median")

    # === –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –æ—Ç–∫—Ä—ã—Ç–∏—è ===
    opening_days_hist = dates_where_month_ahead_is_weekend(df_win.index)
    is_open_hist = pd.Series(df_win.index.date, index=df_win.index).isin(opening_days_hist)
    is_weekday_hist = df_win.index.weekday < 5
    hour_coefs = {}
    for h in PEAK_HOURS:
        open_vals = df_win[(df_win["hour"] == h) & is_open_hist]["–ó–≤–æ–Ω–∫–∏"]
        base_vals = df_win[(df_win["hour"] == h) & (~is_open_hist) & is_weekday_hist]["–ó–≤–æ–Ω–∫–∏"]
        if len(open_vals) >= 2 and len(base_vals) >= 2 and base_vals.median() > 0:
            coef = trimmed_mean(open_vals) / trimmed_mean(base_vals)
            coef = float(np.clip(coef, 2.0, 5.0))  # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
        else:
            coef = 2.0
        hour_coefs[h] = coef

    # === –ü—Ä–æ–≥–Ω–æ–∑ ===
    today = pd.Timestamp.today().normalize()
    start_forecast = (today + pd.Timedelta(days=1)).replace(hour=WORK_START)
    steps = horizon_days * SLOTS_PER_DAY
    future_idx = generate_future_business_hours(start_forecast - pd.Timedelta(hours=1), steps)

    base_vals = []
    for t in future_idx:
        w, h = t.weekday(), t.hour
        v = pivot_med.loc[h, w] if (h in pivot_med.index and w in pivot_med.columns) else np.nan
        if pd.isna(v): v = df_win.groupby("hour")["–ó–≤–æ–Ω–∫–∏"].median().get(h, df_win["–ó–≤–æ–Ω–∫–∏"].median())
        base_vals.append(v)

    out = pd.DataFrame({"Datetime": future_idx, "–ë–∞–∑–∞": base_vals})
    out["Date"] = out["Datetime"].dt.strftime("%d-%m-%Y")
    out["Hour"] = out["Datetime"].dt.hour
    out["–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏"] = out["Datetime"].dt.day_name(locale="Russian")
    out["–û—Ç–∫—Ä—ã—Ç–∏–µ?"] = out["Datetime"].dt.date.isin(dates_where_month_ahead_is_weekend(out["Datetime"]))

    out["–ü—Ä–æ–≥–Ω–æ–∑ –∑–≤–æ–Ω–∫–æ–≤"] = out["–ë–∞–∑–∞"]
    for h in PEAK_HOURS:
        mask = (out["–û—Ç–∫—Ä—ã—Ç–∏–µ?"]) & (out["Hour"] == h)
        out.loc[mask, "–ü—Ä–æ–≥–Ω–æ–∑ –∑–≤–æ–Ω–∫–æ–≤"] *= hour_coefs[h]
    out["–ü—Ä–æ–≥–Ω–æ–∑ –∑–≤–æ–Ω–∫–æ–≤"] = np.maximum(np.round(out["–ü—Ä–æ–≥–Ω–æ–∑ –∑–≤–æ–Ω–∫–æ–≤"]), 0).astype(int)

    default_aht = df_win["–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)"].median() if not np.isnan(df_win["–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è (–º–∏–Ω)"].median()) else 3.0
    aht_min = st.sidebar.number_input("AHT (–º–∏–Ω)", 0.1, 60.0, round(default_aht,2), 0.1)
    out["–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"] = np.ceil((out["–ü—Ä–æ–≥–Ω–æ–∑ –∑–≤–æ–Ω–∫–æ–≤"] * aht_min) / (60.0 * efficiency)).astype(int)

    # === –ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã ===
    st.markdown("### üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –ø–∏–∫–æ–≤—ã—Ö —á–∞—Å–æ–≤ (–¥–Ω–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –∑–∞–ø–∏—Å–∏)")
    st.write(f"09:00 ‚Üí **{hour_coefs.get(9, 2.0):.2f}√ó**")
    st.write(f"10:00 ‚Üí **{hour_coefs.get(10, 2.0):.2f}√ó**")

    # ===== –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ –¥–Ω—è–º =====
    for d, grp in out.groupby("Date"):
        with st.expander(f"üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {d} ({grp['–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏'].iloc[0]})"):
            st.dataframe(grp[["Hour","–ü—Ä–æ–≥–Ω–æ–∑ –∑–≤–æ–Ω–∫–æ–≤","–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"]], use_container_width=True)
            chart_day = alt.Chart(grp).mark_line(point=True, color="#4C78A8").encode(
                x=alt.X("Hour:O", title="–ß–∞—Å"),
                y=alt.Y("–ü—Ä–æ–≥–Ω–æ–∑ –∑–≤–æ–Ω–∫–æ–≤:Q", title="–ó–≤–æ–Ω–∫–∏"),
                tooltip=["Hour","–ü—Ä–æ–≥–Ω–æ–∑ –∑–≤–æ–Ω–∫–æ–≤","–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏"]
            )
            staff_day = alt.Chart(grp).mark_bar(opacity=0.3, color="#72B7B2").encode(
                x="Hour:O", y="–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏:Q"
            )
            st.altair_chart(chart_day + staff_day, use_container_width=True)

    # ===== –°–∫–∞—á–∞—Ç—å =====
    st.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ (CSV)", data=out.to_csv(index=False).encode("utf-8"),
                       file_name="wfm_result.csv", mime="text/csv")
